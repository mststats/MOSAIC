// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cppbackward
void cppbackward(int k, int NUMA, int maxdonors, bool THIN, int NUMP, int L, int gl, int gu, int G, NumericVector transitions, List UMATCH, int max_umatch_size, List dw, List tw, IntegerVector gobs, NumericVector mutmat, int maxmiss, IntegerVector label, IntegerVector kndonors, IntegerVector donates, IntegerVector donatesr, IntegerVector flips, NumericVector backs, NumericVector scalefactor);
RcppExport SEXP _MOSAIC_cppbackward(SEXP kSEXP, SEXP NUMASEXP, SEXP maxdonorsSEXP, SEXP THINSEXP, SEXP NUMPSEXP, SEXP LSEXP, SEXP glSEXP, SEXP guSEXP, SEXP GSEXP, SEXP transitionsSEXP, SEXP UMATCHSEXP, SEXP max_umatch_sizeSEXP, SEXP dwSEXP, SEXP twSEXP, SEXP gobsSEXP, SEXP mutmatSEXP, SEXP maxmissSEXP, SEXP labelSEXP, SEXP kndonorsSEXP, SEXP donatesSEXP, SEXP donatesrSEXP, SEXP flipsSEXP, SEXP backsSEXP, SEXP scalefactorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type NUMA(NUMASEXP);
    Rcpp::traits::input_parameter< int >::type maxdonors(maxdonorsSEXP);
    Rcpp::traits::input_parameter< bool >::type THIN(THINSEXP);
    Rcpp::traits::input_parameter< int >::type NUMP(NUMPSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type gl(glSEXP);
    Rcpp::traits::input_parameter< int >::type gu(guSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< List >::type UMATCH(UMATCHSEXP);
    Rcpp::traits::input_parameter< int >::type max_umatch_size(max_umatch_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type dw(dwSEXP);
    Rcpp::traits::input_parameter< List >::type tw(twSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gobs(gobsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mutmat(mutmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxmiss(maxmissSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label(labelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kndonors(kndonorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donates(donatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donatesr(donatesrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type flips(flipsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type backs(backsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scalefactor(scalefactorSEXP);
    cppbackward(k, NUMA, maxdonors, THIN, NUMP, L, gl, gu, G, transitions, UMATCH, max_umatch_size, dw, tw, gobs, mutmat, maxmiss, label, kndonors, donates, donatesr, flips, backs, scalefactor);
    return R_NilValue;
END_RCPP
}
// cpp_unique_haps
List cpp_unique_haps(IntegerVector Y, int k, int S, int G, IntegerVector gmap, int maxgmap, List uhaps);
RcppExport SEXP _MOSAIC_cpp_unique_haps(SEXP YSEXP, SEXP kSEXP, SEXP SSEXP, SEXP GSEXP, SEXP gmapSEXP, SEXP maxgmapSEXP, SEXP uhapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gmap(gmapSEXP);
    Rcpp::traits::input_parameter< int >::type maxgmap(maxgmapSEXP);
    Rcpp::traits::input_parameter< List >::type uhaps(uhapsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_unique_haps(Y, k, S, G, gmap, maxgmap, uhaps));
    return rcpp_result_gen;
END_RCPP
}
// cppforback
NumericVector cppforback(int maxdonors, bool THIN, int NUMP, int L, int G, IntegerVector ndonors, IntegerVector donates, NumericVector fors, NumericVector backs);
RcppExport SEXP _MOSAIC_cppforback(SEXP maxdonorsSEXP, SEXP THINSEXP, SEXP NUMPSEXP, SEXP LSEXP, SEXP GSEXP, SEXP ndonorsSEXP, SEXP donatesSEXP, SEXP forsSEXP, SEXP backsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxdonors(maxdonorsSEXP);
    Rcpp::traits::input_parameter< bool >::type THIN(THINSEXP);
    Rcpp::traits::input_parameter< int >::type NUMP(NUMPSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ndonors(ndonorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donates(donatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fors(forsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type backs(backsSEXP);
    rcpp_result_gen = Rcpp::wrap(cppforback(maxdonors, THIN, NUMP, L, G, ndonors, donates, fors, backs));
    return rcpp_result_gen;
END_RCPP
}
// cppgforback
NumericVector cppgforback(int maxdonors, int THIN, int kLL, int NUMP, IntegerVector label, int L, int G, IntegerVector ndonors, IntegerVector donates, NumericVector fors, NumericVector backs);
RcppExport SEXP _MOSAIC_cppgforback(SEXP maxdonorsSEXP, SEXP THINSEXP, SEXP kLLSEXP, SEXP NUMPSEXP, SEXP labelSEXP, SEXP LSEXP, SEXP GSEXP, SEXP ndonorsSEXP, SEXP donatesSEXP, SEXP forsSEXP, SEXP backsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxdonors(maxdonorsSEXP);
    Rcpp::traits::input_parameter< int >::type THIN(THINSEXP);
    Rcpp::traits::input_parameter< int >::type kLL(kLLSEXP);
    Rcpp::traits::input_parameter< int >::type NUMP(NUMPSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label(labelSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ndonors(ndonorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donates(donatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fors(forsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type backs(backsSEXP);
    rcpp_result_gen = Rcpp::wrap(cppgforback(maxdonors, THIN, kLL, NUMP, label, L, G, ndonors, donates, fors, backs));
    return rcpp_result_gen;
END_RCPP
}
// cppforward
void cppforward(int k, int NUMA, int maxdonors, bool THIN, int NUMP, int kLL, int L, int gl, int gu, int G, NumericVector transitions, List UMATCH, int max_umatch_size, List dw, List tw, IntegerVector gobs, NumericVector mutmat, int maxmiss, NumericVector initProb, IntegerVector label, IntegerVector kndonors, IntegerVector donates, IntegerVector donatesl, IntegerVector flips, NumericVector fors, NumericVector sumfors, NumericVector scalefactor);
RcppExport SEXP _MOSAIC_cppforward(SEXP kSEXP, SEXP NUMASEXP, SEXP maxdonorsSEXP, SEXP THINSEXP, SEXP NUMPSEXP, SEXP kLLSEXP, SEXP LSEXP, SEXP glSEXP, SEXP guSEXP, SEXP GSEXP, SEXP transitionsSEXP, SEXP UMATCHSEXP, SEXP max_umatch_sizeSEXP, SEXP dwSEXP, SEXP twSEXP, SEXP gobsSEXP, SEXP mutmatSEXP, SEXP maxmissSEXP, SEXP initProbSEXP, SEXP labelSEXP, SEXP kndonorsSEXP, SEXP donatesSEXP, SEXP donateslSEXP, SEXP flipsSEXP, SEXP forsSEXP, SEXP sumforsSEXP, SEXP scalefactorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type NUMA(NUMASEXP);
    Rcpp::traits::input_parameter< int >::type maxdonors(maxdonorsSEXP);
    Rcpp::traits::input_parameter< bool >::type THIN(THINSEXP);
    Rcpp::traits::input_parameter< int >::type NUMP(NUMPSEXP);
    Rcpp::traits::input_parameter< int >::type kLL(kLLSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type gl(glSEXP);
    Rcpp::traits::input_parameter< int >::type gu(guSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< List >::type UMATCH(UMATCHSEXP);
    Rcpp::traits::input_parameter< int >::type max_umatch_size(max_umatch_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type dw(dwSEXP);
    Rcpp::traits::input_parameter< List >::type tw(twSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gobs(gobsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mutmat(mutmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxmiss(maxmissSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initProb(initProbSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label(labelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kndonors(kndonorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donates(donatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donatesl(donateslSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type flips(flipsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fors(forsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sumfors(sumforsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scalefactor(scalefactorSEXP);
    cppforward(k, NUMA, maxdonors, THIN, NUMP, kLL, L, gl, gu, G, transitions, UMATCH, max_umatch_size, dw, tw, gobs, mutmat, maxmiss, initProb, label, kndonors, donates, donatesl, flips, fors, sumfors, scalefactor);
    return R_NilValue;
END_RCPP
}
// cppprobs
List cppprobs(int k, int NUMA, int maxdonors, bool THIN, int L, int kLL, int NN, int NUMP, int G, IntegerVector label, NumericVector fors, NumericVector sumfors, NumericVector backs, NumericVector transitions, IntegerVector flips, NumericVector mutmat, int maxmiss, List UMATCH, int max_umatch_size, List dw, List tw, IntegerVector gobs, IntegerVector kndonors, IntegerVector donates, IntegerVector donatesl);
RcppExport SEXP _MOSAIC_cppprobs(SEXP kSEXP, SEXP NUMASEXP, SEXP maxdonorsSEXP, SEXP THINSEXP, SEXP LSEXP, SEXP kLLSEXP, SEXP NNSEXP, SEXP NUMPSEXP, SEXP GSEXP, SEXP labelSEXP, SEXP forsSEXP, SEXP sumforsSEXP, SEXP backsSEXP, SEXP transitionsSEXP, SEXP flipsSEXP, SEXP mutmatSEXP, SEXP maxmissSEXP, SEXP UMATCHSEXP, SEXP max_umatch_sizeSEXP, SEXP dwSEXP, SEXP twSEXP, SEXP gobsSEXP, SEXP kndonorsSEXP, SEXP donatesSEXP, SEXP donateslSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type NUMA(NUMASEXP);
    Rcpp::traits::input_parameter< int >::type maxdonors(maxdonorsSEXP);
    Rcpp::traits::input_parameter< bool >::type THIN(THINSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type kLL(kLLSEXP);
    Rcpp::traits::input_parameter< int >::type NN(NNSEXP);
    Rcpp::traits::input_parameter< int >::type NUMP(NUMPSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label(labelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fors(forsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sumfors(sumforsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type backs(backsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type flips(flipsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mutmat(mutmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxmiss(maxmissSEXP);
    Rcpp::traits::input_parameter< List >::type UMATCH(UMATCHSEXP);
    Rcpp::traits::input_parameter< int >::type max_umatch_size(max_umatch_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type dw(dwSEXP);
    Rcpp::traits::input_parameter< List >::type tw(twSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gobs(gobsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kndonors(kndonorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donates(donatesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donatesl(donateslSEXP);
    rcpp_result_gen = Rcpp::wrap(cppprobs(k, NUMA, maxdonors, THIN, L, kLL, NN, NUMP, G, label, fors, sumfors, backs, transitions, flips, mutmat, maxmiss, UMATCH, max_umatch_size, dw, tw, gobs, kndonors, donates, donatesl));
    return rcpp_result_gen;
END_RCPP
}
// cppswitches
List cppswitches(int k, int NUMA, int maxdonors, bool THIN, int NUMP, int G, IntegerVector NL, IntegerVector label, NumericVector sumfors, NumericVector backs, NumericVector transitions, IntegerVector flips, NumericVector mutmat, int maxmiss, List UMATCH, int max_umatch_size, List dw, List tw, IntegerVector gobs, IntegerVector kndonors, IntegerVector donates);
RcppExport SEXP _MOSAIC_cppswitches(SEXP kSEXP, SEXP NUMASEXP, SEXP maxdonorsSEXP, SEXP THINSEXP, SEXP NUMPSEXP, SEXP GSEXP, SEXP NLSEXP, SEXP labelSEXP, SEXP sumforsSEXP, SEXP backsSEXP, SEXP transitionsSEXP, SEXP flipsSEXP, SEXP mutmatSEXP, SEXP maxmissSEXP, SEXP UMATCHSEXP, SEXP max_umatch_sizeSEXP, SEXP dwSEXP, SEXP twSEXP, SEXP gobsSEXP, SEXP kndonorsSEXP, SEXP donatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type NUMA(NUMASEXP);
    Rcpp::traits::input_parameter< int >::type maxdonors(maxdonorsSEXP);
    Rcpp::traits::input_parameter< bool >::type THIN(THINSEXP);
    Rcpp::traits::input_parameter< int >::type NUMP(NUMPSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NL(NLSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type label(labelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sumfors(sumforsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type backs(backsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type flips(flipsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mutmat(mutmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxmiss(maxmissSEXP);
    Rcpp::traits::input_parameter< List >::type UMATCH(UMATCHSEXP);
    Rcpp::traits::input_parameter< int >::type max_umatch_size(max_umatch_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type dw(dwSEXP);
    Rcpp::traits::input_parameter< List >::type tw(twSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gobs(gobsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kndonors(kndonorsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type donates(donatesSEXP);
    rcpp_result_gen = Rcpp::wrap(cppswitches(k, NUMA, maxdonors, THIN, NUMP, G, NL, label, sumfors, backs, transitions, flips, mutmat, maxmiss, UMATCH, max_umatch_size, dw, tw, gobs, kndonors, donates));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MOSAIC_cppbackward", (DL_FUNC) &_MOSAIC_cppbackward, 24},
    {"_MOSAIC_cpp_unique_haps", (DL_FUNC) &_MOSAIC_cpp_unique_haps, 7},
    {"_MOSAIC_cppforback", (DL_FUNC) &_MOSAIC_cppforback, 9},
    {"_MOSAIC_cppgforback", (DL_FUNC) &_MOSAIC_cppgforback, 11},
    {"_MOSAIC_cppforward", (DL_FUNC) &_MOSAIC_cppforward, 27},
    {"_MOSAIC_cppprobs", (DL_FUNC) &_MOSAIC_cppprobs, 25},
    {"_MOSAIC_cppswitches", (DL_FUNC) &_MOSAIC_cppswitches, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_MOSAIC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
